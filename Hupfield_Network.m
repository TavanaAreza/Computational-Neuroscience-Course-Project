%% Neuroscience of Learning Course Project, Fall 00-01
% Ahamdreza Tavana 98104852
% Thanks to Alex Bod
% ======================================================================

% use Input to train your network ===============================
clear;
clc;

% "A"
Input = ...
    ['    OO    ';
     '    OO    ';  ...
     '   OOOO   ';  ...
     '   O  O   ';  ...
     '  OO  OO  ';  ...
     '  O    O  ';  ...
     ' OOOOOOOO ';  ...
     ' OOOOOOOO ';  ...
     'OO      OO';  ...
     'OO      OO'];
 
 % "B"
Input(:, :, 2) =        ...
    ['OOOOOO    ';  ...
     'OOOOOOO   ';  ...
     'OO   OO   ';  ...
     'OOOOOOO   ';  ...
     'OOOOOOO   ';  ...
     'OO   OOO  ';  ...
     'OO    OO  ';  ...
     'OO   OOO  ';  ...
     'OOOOOOO   ';  ...
     'OOOOOO    '];
 
 % "C"
Input(:, :, 3) =        ...
    ['OOOOOOOOOO';  ...
     'OOOOOOOOOO';  ...
     'OO      OO';  ...
     'OO        ';  ...
     'OO        ';  ...
     'OO        ';  ...
     'OO        ';  ...
     'OO      OO';  ...
     'OOOOOOOOOO';  ...
     'OOOOOOOOOO'];
 
 % "H"
Input(:, :, 4) =        ...
    ['OO      OO';  ...
     'OO      OO';  ...
     'OO      OO';  ...
     'OO      OO';  ...
     'OOOOOOOOOO';  ...
     'OOOOOOOOOO';  ...
     'OO      OO';  ...
     'OO      OO';  ...
     'OO      OO';  ...
     'OO      OO'];
 
 % Persian "M"
Input(:, :, 5) =        ...
    ['      OOO ';  ...
     '    OO  OO';  ...
     'OOOOOOOOOO';  ...
     'OOO       ';  ...
     'OO        ';  ...
     'OO        ';  ...
     'OO        ';  ...
     'OO        ';  ...
     'OO        ';  ...
     'OO        '];
 
 
% Use NoisyInput for testing your network ===============================

% Noisy "A"
NoisyInput =        ...
    ['    OO    ';  
     '    OO    ';  ...
     '   OOOO   ';  ...
     '   O  OO  ';  ...
     '  OO  OOO ';  ...
     '  OO   OO ';  ...
     ' OOO  OOO ';  ...
     ' OOOOOOOO ';  ...
     'O       OO';  ...
     'OO      OO'];
 
 % Noisy "B"
NoisyInput(:, :, 2) =        ...
    ['OOOOOOO   ';   ...
     'OOOOOOOOO ';   ...
     'OO   OOOO ';  ...
     'OOOOOOOOO ';   ...
     'OOOOOOO   ';  ...
     'OO   OOO  ';  ...
     'OOOO  OO  ';  ...
     'OO   OOO  ';  ...
     'OOOOOOO   ';  ...
     'OOOOOOOO  '];
 
 % Noisy "C"
NoisyInput(:, :, 3) =        ...
    ['OOOOOOOOOO';  ...
     'OOOOOO OOO';  ...
     'OO    O OO';  ...
     'OO        ';  ...
     'OOOOOO    ';  ...
     'OO    OOO ';  ...
     'OO        ';  ...
     'OO      OO';  ...
     'O  OOOOOOO';  ...
     'OOOOOOOOOO'];
 
 % Noisy "H"
NoisyInput(:, :, 4) =        ...
    ['OO      OO';  ...
     'OO      OO';  ...
     'OO   OO OO';  ...
     'OO      OO';  ...
     'OOO OOOOOO';  ...
     'OOOOOOOOOO';  ...
     'OO      OO';  ...
     'OO OOOO OO';  ...
     'OO      OO';  ...
     'OO    OOOO'];
 
  % Noisy Persian "M"
 NoisyInput(:, :, 5) =        ...
    ['      OOO ';  ...
     '    OO  OO';  ...
     'OO  O  OOO';  ...
     'OOO       ';  ...
     '   OO     ';  ...
     'OO        ';  ...
     'OO     OO ';  ...
     'OO        ';  ...
     'OOOOO     ';  ...
     'OO        '];
 
 
 
%% =========== Part 4 ===========
numberOfPatterns = 5;
patternLength = 100;
final_encoded_matrix = encode(Input,5,100);
final_decoded_matrix = decode(Input,final_encoded_matrix,5);


%% =========== Part 5 ===========
final_weight_matrix = weight(final_encoded_matrix,100);
EncodedNoisyInput = encode(NoisyInput,5,100);
DecodedNoisyInput = decode(NoisyInput,EncodedNoisyInput,5);


%% =========== Part 6 ===========

final_recunstructed_matrix = recunstruction(EncodedNoisyInput,final_weight_matrix,5,100);
final_noisy_recunstructed_matrix = decode(NoisyInput,final_recunstructed_matrix,5);


%% Functions

%%%% encode
function encoded = encode(Input,numberOfPatterns,patternLength)
    encoded = ones(numberOfPatterns, patternLength);
    pattern = char(ones(10,10)* 'O');
    for i = 1:numberOfPatterns
        pattern = Input(:,:,i);
       for j = 1:100
           if(pattern(j) ~= 'O')
               encoded(i,j) = -1;
           end
       end
    end
end


%%%% decode
function decoded = decode(Input,encodePattern,numberOfPatterns)
    decoded2 = Input;
    for i = 1:numberOfPatterns
        decoded2 = Input(:,:,i);
        for j = 1:100
            if(encodePattern(i,j) == 1)
               decoded2(j) = 'O'; 
            end
            
            if(encodePattern(i,j) == -1)
               decoded2(j) = ' '; 
            end
        end
        decoded(:,:,i) = decoded2;
    end
end


%%%% weight
function w = weight(Input,patternLenght)
    w = zeros(patternLenght,patternLenght);
    for i = 1:5
       for j = 1:patternLenght
          for k = 1:patternLenght
             if(j ~= k)
                w(j,k) = w(j,k) + (2*Input(i,j)-1) * (2*Input(i,k)-1);  
             end
          end
       end
    end
     
end


%%%% recunstruction
function rec = recunstruction(Input,weights,numerOfPatterns,patternLenght)
    rec = zeros(numerOfPatterns,patternLenght);
        for i = 1:numerOfPatterns
            states = Input(i,:);
            while(true)
                change = 0;
                for j = 1:patternLenght
                    if(dot(states,weights(j,:)) >= 0)
                       response = 1; 
                    end

                    if(dot(states,weights(j,:)) < 0)
                       response = -1; 
                    end

                    if(states(j)~= response)
                        states(j)= response;
                        change = change + 1;
                    end
                end

                if(change ‍‍< 40)
                   break;
                end

            end

            rec(i,:) = states;


        end
end
